// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MANAGER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  UserProject   UserProject[]
  UserJob       UserJob[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Job {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  status      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ProjectJob  ProjectJob[]
  UserJob     UserJob[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  status      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ProjectJob  ProjectJob[]
  UserProject UserProject[]
}

model ProjectJob {
  projectId Int
  jobId     Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@id([projectId, jobId])
}

model UserProject {
  userId    String
  projectId Int
  joinDate  DateTime
  outDate   DateTime?
  status    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model UserJob {
  userId String
  jobId  Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@id([userId, jobId])
}
