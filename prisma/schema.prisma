// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  name        String @id
  description String
  user        User[]
}

model User {
  id                  String         @id @default(cuid())
  firstName           String?
  lastName            String?
  email               String         @unique
  userName            String?        @unique
  emailVerified       DateTime?
  image               String?
  roleName            String?
  password            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  allowRejectJob      Boolean?       @default(false)
  allowManageJobs     Boolean?       @default(false)
  allowManageUsers    Boolean?       @default(false)
  allowManageTermBase Boolean?       @default(false)
  allowViewAllProject Boolean?       @default(false)
  status              String?
  role                Role?          @relation(fields: [roleName], references: [name])
  accounts            Account[]
  createdProjects     Project[]      @relation("UserCreateProject")
  ownerProjects       Project[]      @relation("UserOwnerProject")
  UserCompany         UserCompany[]
  Roc                 Roc[]
  UserJob             UserJob[]
  LanguageUser        LanguageUser[]
  UserProject         UserProject[]
}

model Account {
  userId            String
  type              String?
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

model Company {
  id             BigInt           @id @default(autoincrement())
  name           String
  description    String?
  email          String           @unique
  link           String?
  status         String
  language       String?
  timeZone       String?
  userCompany    UserCompany[]
  companyProject CompanyProject[]
}

model UserCompany {
  userId        String
  companyId     BigInt
  joinDate      DateTime
  outDate       DateTime?
  isHeadCompany Boolean
  company       Company   @relation(fields: [companyId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
}

model CompanyProject {
  companyId BigInt
  projectId Int
  Company   Company @relation(fields: [companyId], references: [id])
  Project   Project @relation(fields: [projectId], references: [id])

  @@id([companyId, projectId])
}

model Job {
  id               Int        @id @default(autoincrement())
  name             String
  status           String     @default("new")
  dueDate          DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  fileExtention    String
  targetLanguage   Language?  @relation(name: "JobTargetLanguage", fields: [targetLanguageId], references: [code])
  targetLanguageId String?
  Document         Document[]
  UserJob          UserJob[]
  Project          Project?   @relation(fields: [projectId], references: [id])
  projectId        Int?
  documentUrl      String?
}

model UserJob {
  userId String
  jobId  Int
  user   User   @relation(fields: [userId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])

  @@id([userId, jobId])
}

model Project {
  id                              Int              @id @default(autoincrement())
  name                            String
  createBy                        String
  description                     String
  status                          String
  owner                           String
  sourceLanguage                  String
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt
  createUser                      User             @relation(name: "UserCreateProject", fields: [createBy], references: [id])
  ownerUser                       User             @relation(name: "UserOwnerProject", fields: [owner], references: [id])
  language                        Language         @relation(fields: [sourceLanguage], references: [code])
  dueDate                         DateTime
  clientName                      String
  metadata                        String
  markProjectAssigned             String
  markProjectCompleted            String
  markProjectCanceled             Boolean
  emptyTargetQA                   Boolean
  emptyTargetIgnore               Boolean
  extraNumberInTargetQA           Boolean
  extraNumberInTargetIgnore       Boolean
  inconsistentInTargetQA          Boolean
  inconsistentInTargetIgnore      Boolean
  leadingAndTrailingSpaceQA       Boolean
  leadingAndTrailingSpaceIgnore   Boolean
  maxTargetLengthPercentage       Int?
  maxTargetLengthPercentageQA     Boolean
  maxTargetLengthPercentageIgnore Boolean
  maxTargetLengthCharacter        Int?
  maxTargetLengthCharacterQA      Boolean
  maxTargetLengthCharacterIgnore  Boolean
  missingNumberQA                 Boolean
  missingNumberIgnore             Boolean
  missingSpaceQA                  Boolean
  missingSpaceIgnore              Boolean
  repeatedWordQA                  Boolean
  repeatedWordIgnore              Boolean
  spellingQA                      Boolean
  spellingIgnore                  Boolean
  targetTextIdenticalQA           Boolean
  targetTextIdenticalIgnore       Boolean
  progress                        Float
  TargetLanguage                  TargetLanguage[]
  CompanyProject                  CompanyProject[]
  TermBase                        TermBase[]
  Reference                       Reference[]
  UserProject                     UserProject[]
  Job                             Job[]
}

model UserProject {
  userId    String
  projectId Int
  joinDate  DateTime
  outDate   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model TermBase {
  id             Int           @id @default(autoincrement())
  projectId      Int
  term           String
  sourceLanguage String
  project        Project       @relation(fields: [projectId], references: [id])
  ConceptBase    ConceptBase[]
}

model ConceptBase {
  id                  Int      @id @default(autoincrement())
  termBaseId          Int
  concept             String
  destinationLanguage String
  termBase            TermBase @relation(fields: [termBaseId], references: [id])
}

model Reference {
  id          BigInt  @id @default(autoincrement())
  projectId   Int
  name        String  @unique
  description String?
  data        Bytes
  project     Project @relation(fields: [projectId], references: [id])
}

model Document {
  id    BigInt @id @default(autoincrement())
  jobId Int
  data  Bytes
  job   Job    @relation(fields: [jobId], references: [id])
  Roc   Roc[]
}

model Roc {
  id         Int      @id @default(autoincrement())
  documentId BigInt
  changeDate DateTime
  data       Bytes
  userId     String
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Language {
  code           String           @id
  name           String
  TargetLanguage TargetLanguage[]
  project        Project[]
  LanguageUser   LanguageUser[]
  jobs           Job[]            @relation("JobTargetLanguage")
}

model LanguageUser {
  languageCode String
  userId       String
  type         String
  language     Language @relation(fields: [languageCode], references: [code])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([languageCode, userId, type])
}

model TargetLanguage {
  languageCode String
  projectId    Int
  project      Project  @relation(fields: [projectId], references: [id])
  language     Language @relation(fields: [languageCode], references: [code])

  @@id([languageCode, projectId])
}
